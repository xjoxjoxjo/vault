group 'xjoxjoxjo'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

apply plugin: 'com.google.protobuf'

task wrapper(type: Wrapper) {
    gradleVersion = '4.7' //version required
}

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}


dependencies {
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.google.inject.extensions:guice-servlet:4.1.0'
    compile 'com.google.guava:guava:23.2-jre'
    compile 'javax.servlet:javax.servlet-api:4.0.0'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.26'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.26'
    compile 'org.glassfish.jersey.core:jersey-server:2.26'
    compile 'org.slf4j:slf4j-api:1.8.0-alpha2'

    compile group: 'com.sun.jersey.contribs', name: 'jersey-guice', version: '1.19.4'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'org.eclipse.jetty', name: 'jetty-http', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.7.v20170914'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.7.v20170914'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha4'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.4'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.powermock', name: 'powermock', version: '1.6.6', ext: 'pom'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/main/proto")
    }
}
sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            srcDirs 'src/main/java', 'generated-sources/main/java'
        }
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
    }

    generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')
    }
}
